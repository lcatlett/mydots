[user]
	name = Lindsey Catlett
	email = lindsey.catlett@gmail.com
[github]
  # https://github.com/blog/180-local-github-config
  user = lcatlett
[color]
# ui = true is a superset of all the more specific color options
#  as documented at http://book.git-scm.com/5_customizing_git.html
# When set to always, always use colors in all git commands which are capable of colored output.
# When false, never. When set to true or auto, use colors only when the output is to the terminal.
# When more specific variables of color.* are set, they always take precedence over this setting.
# Defaults to false.
	ui = true
  # diff = auto
  # status = auto
  # branch = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
	meta = 11
	frag = magenta bold
	old = red bold
	new = green bold
	func = 146 bold
	commit = yellow bold
	whitespace = red reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[advice]
  statusHints = false

[gui]
  fontdiff = -family Monaco -size 10 -weight normal -slant roman -underline 0 -overstrike 0

[core]
	excludesfile = /Users/lindseycatlett/.gitignore
  quotepath = false
  # line endings
  # force LF during add
  autocrlf = input
  # autocrlf = true # for windows to convert to CRLF on checkout and LF on add
  # warn but allow line ending conversion to proceed
  safecrlf = warn
  # prevent crlf (then you will have to deal with the problem -- dos2unix, etc)
  #safecrlf = true
  editor = vim
	pager = diff-so-fancy | less --tabs=4 -RFX

[rebase]
  autosquash = true

[alias]

  # most commonly used
  co = checkout
  br = branch -a
  s = status -s -u

  nuke = !git clean -fd && git reset --hard
  ri = rebase --interactive --autosquash
  listunstaged = diff --name-status
  liststaged = diff --name-status --staged
  listhistory = log --name-status

  busypeople = shortlog -6
  busythisweek = shortlog --since=one.week.ago
  undo = reset --soft HEAD^


#get author of last commit
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"


  snapstash = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  save-wip = !git add -A && git commit -m 'wip: savepoint'

# List branches according to you most recent checkouts.
  recent = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git reflog | grep checkout | cut -d : -f 3 | cut -d ' ' -f 6 | tail -n +2 | cat -n | sort -k2,2 -u | sort -k1,1 -n | cut -f 2 | grep -e '.\\{40\\}' -v | grep "^$GIT_CURRENT_BRANCH$" -v

  # map typos
  remove = !echo 'WARNING: "git remove" does not exist, continuing under the assumption that you meant "git remote"!' && set -x && git remote

    # list tags version sorted
  tags = "!f() { git tag | sort --version-sort; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

#View the diff of the last commit
  dlc = diff --cached HEAD^

  # Show unpushed/ahead changes
  ahead = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git log origin/$GIT_CURRENT_BRANCH..$GIT_CURRENT_BRANCH --oneline
    # Show the diff of upushed/ahead changes
  ahead-diff = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git diff origin/$GIT_CURRENT_BRANCH..$GIT_CURRENT_BRANCH

  alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /

  # Resolve merge conflict with file in the current working branch
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"
  all-ours = "!f() { [ -z \"$@\" ] && set - '.'; git checkout --ours -- \"$@\"; git add -u -- \"$@\"; }; f"

  # Resolve merge conflict with file in the upstream repo
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
  all-theirs = "!f() { [ -z \"$@\" ] && set - '.'; git checkout --theirs -- \"$@\"; git add -u -- \"$@\"; }; f"


# Delete branch
  del = branch -D

#Update your local and replay your commits on upstream HEAD
  pl = pull --rebase

#Undo your last commit
  undo-commit = reset --soft HEAD~1

# View a pretty formatted git log summary
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

# View a pretty extended format git log
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

#V iew a pretty formatted git log and graph of all branches
  lol = log --pretty=oneline --graph --abbrev-commit --all

  fixup = "!git log -n 50 --pretty=format:'%h %s' --no-merges | fzf | cut -c -7 | xargs -o git commit --fixup"





#Find a file path in codebase
  f = "!git ls-files | grep -i"

 #List your available git config aliases
  la = "!git config -l | grep alias | cut -c 7-"
	cane = commit --amend --no-edit
	mc = merge --continue


[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true

[help]
    autocorrect = 0
[branch]
	autosetuprebase = always
[credential]
	helper =
	helper = /usr/local/share/gcm-core/git-credential-manager-core
[credential "https://dev.azure.com"]
	useHttpPath = true
[commit]
	verbose = false
	template = /Users/lindseycatlett/.stCommitMsg
[interactive]
	diffFilter = diff-so-fancy --patch
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
